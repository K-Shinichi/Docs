ðŸ›  Steps to Build a Custom BSP for Moxa UC-1222 Using Yocto
1. Prepare Your Development Environment

Ensure your system has all dependencies installed.

sudo apt update && sudo apt upgrade -y
sudo apt install -y gawk wget git-core diffstat unzip texinfo gcc-multilib \
    build-essential chrpath socat cpio python3 python3-pip python3-pexpect \
    xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa \
    libsdl1.2-dev pylint xterm

2. Set Up the Yocto Project
2.1 Clone the Yocto Poky Repository

mkdir -p ~/yocto/moxa-uc1222
cd ~/yocto/moxa-uc1222
git clone -b kirkstone git://git.yoctoproject.org/poky.git poky
cd poky

    You can replace kirkstone with the latest stable Yocto release.

2.2 Clone Required Layers

Moxa UC-1222 is ARM-based, so it may require additional layers.

cd ~/yocto/moxa-uc1222
git clone -b kirkstone git://git.openembedded.org/meta-openembedded
git clone -b kirkstone https://github.com/Freescale/meta-freescale.git
git clone -b kirkstone git://git.yoctoproject.org/meta-arm

3. Create a Custom BSP Layer

Since meta-moxa does not exist, we need to create it.
3.1 Generate a New Yocto Layer

cd ~/yocto/moxa-uc1222
source poky/oe-init-build-env
bitbake-layers create-layer ../meta-moxa

This will generate a meta-moxa directory.
3.2 Define the Machine Configuration

Create a new machine configuration file for the Moxa UC-1222.

mkdir -p ../meta-moxa/conf/machine
nano ../meta-moxa/conf/machine/moxa-uc1222.conf

Add the following content:

# Moxa UC-1222 Machine Configuration
DESCRIPTION = "Moxa UC-1222 - ARM Cortex-A7 based Industrial Computer"

# Set CPU architecture
TARGET_ARCH = "arm"

# Specify the SoC (Adjust if necessary)
SOC_FAMILY = "imx"

# Bootloader (Modify based on real hardware specs)
PREFERRED_PROVIDER_u-boot = "u-boot-fslc"
PREFERRED_VERSION_u-boot = "2021.04"

# Kernel Selection
PREFERRED_PROVIDER_virtual/kernel = "linux-moxa"
PREFERRED_VERSION_virtual/kernel = "5.10"

# Root Filesystem Type
IMAGE_FSTYPES = "wic.gz ext4 tar.bz2"

# Default Console Settings
SERIAL_CONSOLES = "115200;ttyS0"

# Extra Features
MACHINE_FEATURES += "usbhost ethernet pci"

# Specify the default device tree (Check Moxa documentation)
KERNEL_DEVICETREE = "imx6ull-uc1222.dtb"

# Default U-Boot Binary
UBOOT_MACHINE = "moxa_uc1222_defconfig"

4. Add Kernel Support
4.1 Create a Kernel Recipe

Create the following directory:

mkdir -p ../meta-moxa/recipes-kernel/linux

Create the kernel recipe:

nano ../meta-moxa/recipes-kernel/linux/linux-moxa_5.10.bb

Add the following content:

DESCRIPTION = "Moxa UC-1222 Kernel"
SECTION = "kernel"
LICENSE = "GPLv2"
LIC_FILES_CHKSUM = "file://COPYING;md5=b4723ca0c5d6ebdc24b6d2894f3de15a"

inherit kernel

SRC_URI = "git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git;branch=linux-5.10.y \
           file://defconfig"

SRCREV = "a1b2c3d4e5f6"  # Replace with the latest commit hash

PV = "5.10"
S = "${WORKDIR}/git"

# Device Tree
KERNEL_DEVICETREE = "imx6ull-uc1222.dtb"

5. Modify the Build Configuration
5.1 Edit bblayers.conf

Modify build/conf/bblayers.conf to include meta-moxa:

BBLAYERS ?= " \
  ${TOPDIR}/../poky/meta \
  ${TOPDIR}/../poky/meta-poky \
  ${TOPDIR}/../poky/meta-yocto-bsp \
  ${TOPDIR}/../meta-moxa \
  ${TOPDIR}/../meta-openembedded/meta-oe \
  ${TOPDIR}/../meta-openembedded/meta-networking \
  ${TOPDIR}/../meta-freescale \
  ${TOPDIR}/../meta-arm \
"

5.2 Edit local.conf

Modify build/conf/local.conf:

MACHINE = "moxa-uc1222"
DISTRO = "poky"
PACKAGE_CLASSES = "package_rpm"
EXTRA_IMAGE_FEATURES = "debug-tweaks"
LICENSE_FLAGS_ACCEPTED = "commercial"

6. Build the Image
6.1 Check Available Images

bitbake-layers show-recipes | grep moxa

6.2 Build the BSP Image

To build a minimal bootable image:

bitbake core-image-minimal

For a more feature-rich image:

bitbake core-image-full-cmdline

6.3 Monitor Build Progress

Use:

tail -f tmp/log/cooker/moxa-uc1222/run.*.log

7. Flash the Image to an SD Card
7.1 Locate the Generated Image

ls tmp/deploy/images/moxa-uc1222/

Expected files:

    core-image-minimal-moxa-uc1222.wic.gz
    u-boot-moxa-uc1222.bin
    imx6ull-uc1222.dtb

7.2 Flash to an SD Card

gunzip -c tmp/deploy/images/moxa-uc1222/core-image-minimal-moxa-uc1222.wic.gz | sudo dd of=/dev/sdX bs=4M status=progress
sync

Replace /dev/sdX with your SD card device.
7.3 Boot the Device

    Insert the SD card into Moxa UC-1222.
    Connect via serial console:

    sudo screen /dev/ttyUSB0 115200

    Power on the device.

8. Debugging & Optimization
8.1 Check Logs

less tmp/log/error.log
bitbake -k core-image-minimal

8.2 Speed Up Build Using sstate Cache

Add this in local.conf:

SSTATE_DIR = "/home/user/yocto/sstate-cache"
DL_DIR = "/home/user/yocto/downloads"

Conclusion

Since meta-moxa does not exist, you need to create a custom BSP layer. This guide outlines all necessary steps to achieve that, including:

    Creating a machine configuration.
    Adding a kernel recipe.
    Building a Yocto image.
    Flashing and booting on the Moxa UC-1222.

Let me know if you need help debugging or customizing your BSP! ðŸš€
You said:
and device tree
ChatGPT said:
Adding the Device Tree for Moxa UC-1222 in Yocto

Since the Moxa UC-1222 does not have an official BSP, you need to create and integrate a custom Device Tree (DT).
1. Locate the Correct Device Tree Source (DTS)

The Moxa UC-1222 is based on the NXP i.MX6ULL processor. You can use an existing i.MX6ULL Device Tree and modify it for the Moxa UC-1222.
1.1 Get the Kernel Source

Ensure your kernel is set up correctly in Yocto. If you haven't done so:

cd ~/yocto/moxa-uc1222
git clone -b imx_5.10.9_1.0.0 https://source.codeaurora.org/external/imx/linux-imx

This repository contains NXP i.MX6ULL Device Trees.
1.2 Copy an Existing i.MX6ULL Device Tree

Navigate to the Device Tree directory:

cd linux-imx/arch/arm/boot/dts

Find a similar i.MX6ULL Device Tree:

ls imx6ull*.dts

A good starting point is imx6ull-14x14-evk.dts.

Copy it to a new file:

cp imx6ull-14x14-evk.dts imx6ull-uc1222.dts

2. Modify the Device Tree for Moxa UC-1222

Edit the new file:

nano imx6ull-uc1222.dts

2.1 Modify Memory Configuration

Find the memory node:

memory {
    device_type = "memory";
    reg = <0x80000000 0x20000000>; /* 512MB */
};

Modify it according to Moxa UC-1222 specs. If it has 256MB RAM, change:

reg = <0x80000000 0x10000000>; /* 256MB */

2.2 Define the UART Console

Ensure the UART console is enabled:

&uart1 {
    pinctrl-names = "default";
    pinctrl-0 = <&pinctrl_uart1>;
    status = "okay";
};

The correct console port should be ttyLP0:

chosen {
    stdout-path = &uart1;
};

2.3 Add Ethernet Configuration

If the board has an Ethernet controller, ensure it is enabled:

&fec1 {
    pinctrl-names = "default";
    pinctrl-0 = <&pinctrl_fec1>;
    phy-mode = "rmii";
    phy-handle = <&ethphy0>;
    status = "okay";
};

&mdio {
    ethphy0: ethernet-phy@0 {
        reg = <0>;
        phy-mode = "rmii";
    };
};

2.4 Enable USB Ports

Moxa UC-1222 has USB host support. Add:

&usbotg1 {
    vbus-supply = <&reg_usb_vbus>;
    status = "okay";
};

&usdhc1 {
    pinctrl-names = "default";
    pinctrl-0 = <&pinctrl_usdhc1>;
    bus-width = <4>;
    status = "okay";
};

2.5 Enable SPI and I2C

To enable SPI:

&ecspi1 {
    fsl,spi-num-chipselects = <1>;
    cs-gpios = <&gpio4 10 GPIO_ACTIVE_LOW>;
    status = "okay";
};

For I2C (if sensors or RTC are present):

&i2c1 {
    clock-frequency = <100000>;
    pinctrl-names = "default";
    pinctrl-0 = <&pinctrl_i2c1>;
    status = "okay";

    rtc@68 {
        compatible = "ds3231";
        reg = <0x68>;
    };
};

3. Add the Device Tree to Yocto
3.1 Place the DTS in Your Yocto BSP

Create a folder for custom Device Trees in meta-moxa:

mkdir -p ../meta-moxa/recipes-kernel/linux/files

Copy the new DTS:

cp linux-imx/arch/arm/boot/dts/imx6ull-uc1222.dts ../meta-moxa/recipes-kernel/linux/files/

3.2 Modify Kernel Recipe

Edit meta-moxa/recipes-kernel/linux/linux-moxa_5.10.bb:

DESCRIPTION = "Moxa UC-1222 Kernel"
SECTION = "kernel"
LICENSE = "GPLv2"
LIC_FILES_CHKSUM = "file://COPYING;md5=b4723ca0c5d6ebdc24b6d2894f3de15a"

inherit kernel

SRC_URI = "git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git;branch=linux-5.10.y \
           file://imx6ull-uc1222.dts"

SRCREV = "a1b2c3d4e5f6"  # Replace with actual commit hash

PV = "5.10"
S = "${WORKDIR}/git"

KERNEL_DEVICETREE = "imx6ull-uc1222.dtb"

4. Build the Kernel with Device Tree
4.1 Compile the Kernel

bitbake virtual/kernel

4.2 Check the Device Tree Output

After the build, check:

ls tmp/deploy/images/moxa-uc1222/

You should see:

    zImage
    imx6ull-uc1222.dtb

5. Flash the Image and Boot
5.1 Copy Kernel & Device Tree to SD Card

sudo dd if=tmp/deploy/images/moxa-uc1222/core-image-minimal-moxa-uc1222.wic.gz of=/dev/sdX bs=4M status=progress
sync

5.2 Boot the Moxa UC-1222

    Insert the SD card.
    Connect to UART console:

sudo screen /dev/ttyUSB0 115200

    Power on the board.

5.3 Verify Device Tree is Loaded

dmesg | grep -i dtb
ls /proc/device-tree/

Conclusion

    Created a custom Device Tree (imx6ull-uc1222.dts) based on i.MX6ULL.
    Integrated it into Yocto by modifying the kernel recipe.
    Compiled the kernel and flashed the SD card.
    Booted the device and verified the DTB.

ðŸš€ Next Steps: Add specific peripherals (CAN, GPIOs, RS-485) if required. Let me know if you need further customization!
You said:
give me the full steps for a full working yocto image
ChatGPT said:
Building a Full Working Yocto Image for Moxa UC-1222

This guide provides step-by-step instructions to build a fully functional Yocto Linux image for the Moxa UC-1222, including bootloader, kernel, root filesystem, and device tree.
1. Prepare the Build Environment
1.1 Install Required Dependencies

Before starting, install the necessary packages on your Linux system.
For Ubuntu/Debian

sudo apt update && sudo apt upgrade -y
sudo apt install -y gawk wget git-core diffstat unzip texinfo gcc-multilib \
     build-essential chrpath socat cpio python3 python3-pip python3-pexpect \
     xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa \
     libsdl1.2-dev pylint xterm

For Fedora

sudo dnf install -y gawk make wget tar bzip2 gzip python3 unzip perl patch \
     diffutils diffstat git cpp gcc gcc-c++ glibc-devel texinfo chrpath \
     ccache perl-Data-Dumper perl-Text-ParseWords perl-Thread-Queue \
     python3-pip python3-GitPython python3-jinja2 SDL-devel xterm

2. Set Up the Yocto Project
2.1 Clone the Yocto Poky Repository

mkdir -p ~/yocto/moxa-uc1222
cd ~/yocto/moxa-uc1222
git clone -b kirkstone git://git.yoctoproject.org/poky.git poky
cd poky

    You can replace kirkstone with the latest stable Yocto release.

2.2 Clone Required Layers

Since Moxa UC-1222 is ARM-based, additional layers are required.

cd ~/yocto/moxa-uc1222
git clone -b kirkstone git://git.openembedded.org/meta-openembedded
git clone -b kirkstone https://github.com/Freescale/meta-freescale.git
git clone -b kirkstone git://git.yoctoproject.org/meta-arm

3. Create a Custom BSP Layer

Since meta-moxa does not exist, we need to create it.
3.1 Generate a New Yocto Layer

cd ~/yocto/moxa-uc1222
source poky/oe-init-build-env
bitbake-layers create-layer ../meta-moxa

This creates a meta-moxa directory.
3.2 Define the Machine Configuration

Create a new machine configuration file.

mkdir -p ../meta-moxa/conf/machine
nano ../meta-moxa/conf/machine/moxa-uc1222.conf

Add the following:

# Moxa UC-1222 Machine Configuration
DESCRIPTION = "Moxa UC-1222 - ARM Cortex-A7 Industrial Computer"

# Set CPU architecture
TARGET_ARCH = "arm"

# Bootloader
PREFERRED_PROVIDER_u-boot = "u-boot-moxa"
PREFERRED_VERSION_u-boot = "2021.04"

# Kernel
PREFERRED_PROVIDER_virtual/kernel = "linux-moxa"
PREFERRED_VERSION_virtual/kernel = "5.10"

# Root Filesystem Type
IMAGE_FSTYPES = "wic.gz ext4 tar.bz2"

# Console Output
SERIAL_CONSOLES = "115200;ttyS0"

# Device Tree
KERNEL_DEVICETREE = "imx6ull-uc1222.dtb"

4. Add Kernel Support
4.1 Create a Kernel Recipe

mkdir -p ../meta-moxa/recipes-kernel/linux
nano ../meta-moxa/recipes-kernel/linux/linux-moxa_5.10.bb

Add:

DESCRIPTION = "Moxa UC-1222 Kernel"
SECTION = "kernel"
LICENSE = "GPLv2"
LIC_FILES_CHKSUM = "file://COPYING;md5=b4723ca0c5d6ebdc24b6d2894f3de15a"

inherit kernel

SRC_URI = "git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git;branch=linux-5.10.y \
           file://imx6ull-uc1222.dts"

SRCREV = "a1b2c3d4e5f6"

PV = "5.10"
S = "${WORKDIR}/git"

KERNEL_DEVICETREE = "imx6ull-uc1222.dtb"

4.2 Add the Device Tree

mkdir -p ../meta-moxa/recipes-kernel/linux/files
nano ../meta-moxa/recipes-kernel/linux/files/imx6ull-uc1222.dts

Copy and modify an existing i.MX6ULL Device Tree.
5. Configure U-Boot
5.1 Create U-Boot Recipe

mkdir -p ../meta-moxa/recipes-bsp/u-boot
nano ../meta-moxa/recipes-bsp/u-boot/u-boot-moxa_2021.04.bb

Add:

DESCRIPTION = "U-Boot for Moxa UC-1222"
LICENSE = "GPLv2"
LIC_FILES_CHKSUM = "file://Licenses/README;md5=xxx"

inherit u-boot

SRC_URI = "git://git.denx.de/u-boot.git;branch=master \
           file://moxa_uc1222_defconfig"

SRCREV = "abcdef123456"

S = "${WORKDIR}/git"

UBOOT_MACHINE = "moxa_uc1222_defconfig"

6. Modify the Build Configuration
6.1 Edit bblayers.conf

Modify build/conf/bblayers.conf:

BBLAYERS ?= " \
  ${TOPDIR}/../poky/meta \
  ${TOPDIR}/../poky/meta-poky \
  ${TOPDIR}/../poky/meta-yocto-bsp \
  ${TOPDIR}/../meta-moxa \
  ${TOPDIR}/../meta-openembedded/meta-oe \
  ${TOPDIR}/../meta-openembedded/meta-networking \
  ${TOPDIR}/../meta-freescale \
  ${TOPDIR}/../meta-arm \
"

6.2 Edit local.conf

MACHINE = "moxa-uc1222"
DISTRO = "poky"
PACKAGE_CLASSES = "package_rpm"
EXTRA_IMAGE_FEATURES = "debug-tweaks"
LICENSE_FLAGS_ACCEPTED = "commercial"

7. Build the Yocto Image
7.1 Check Available Images

bitbake-layers show-recipes | grep moxa

7.2 Build the Image

bitbake core-image-minimal

7.3 Monitor Build Progress

tail -f tmp/log/cooker/moxa-uc1222/run.*.log

8. Flash the Image to an SD Card
8.1 Locate the Image

ls tmp/deploy/images/moxa-uc1222/

Files:

    core-image-minimal-moxa-uc1222.wic.gz
    u-boot-moxa-uc1222.bin
    imx6ull-uc1222.dtb

8.2 Flash to SD Card

gunzip -c tmp/deploy/images/moxa-uc1222/core-image-minimal-moxa-uc1222.wic.gz | sudo dd of=/dev/sdX bs=4M status=progress
sync

Replace /dev/sdX with the correct SD card device.
9. Boot the Moxa UC-1222

    Insert the SD card into Moxa UC-1222.
    Connect via serial console:

sudo screen /dev/ttyUSB0 115200

    Power on the device and monitor boot logs.

10. Verify Device Tree

dmesg | grep -i dtb
ls /proc/device-tree/

Conclusion

This guide walks through building a complete working Yocto image for the Moxa UC-1222.

ðŸš€ Let me know if you need further debugging or customization!
