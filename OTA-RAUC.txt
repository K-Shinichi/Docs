Updating the root filesystem (rootfs) using RAUC in Yocto involves several steps, including configuring RAUC, integrating it with Yocto, generating an update bundle, and deploying it to the target system. Below is a detailed step-by-step guide:
1. Prerequisites

Before you start, ensure you have:

    A Yocto-based system configured and running.
    RAUC integrated into your Yocto project.
    An understanding of the RAUC bundle format.
    A Yocto development environment set up with a compatible machine configuration.
    The meta-rauc layer added to your Yocto build environment.

2. Setting Up RAUC in Yocto
Step 1: Add the meta-rauc layer

If you haven't already, add the meta-rauc layer to your Yocto project.

cd ~/yocto
git clone https://github.com/rauc/meta-rauc.git
bitbake-layers add-layer meta-rauc

Step 2: Configure RAUC in Your Yocto Build

Modify your local.conf or machine configuration file (e.g., conf/local.conf or conf/machine.conf) to enable RAUC.

IMAGE_INSTALL:append = " rauc"
RAUC_KEY_FILE = "${TOPDIR}/keys/development-1.pem"

Make sure your Yocto machine supports RAUC by ensuring systemd is enabled:

DISTRO_FEATURES:append = " systemd"
VIRTUAL-RUNTIME_init_manager = "systemd"

Step 3: Generate Signing Keys for RAUC

RAUC requires signed update bundles. Generate an RSA key pair:

mkdir -p ~/yocto/keys
openssl genpkey -algorithm RSA -out ~/yocto/keys/development-1.pem -pkeyopt rsa_keygen_bits:2048
openssl req -new -x509 -key ~/yocto/keys/development-1.pem -out ~/yocto/keys/development-1.crt -days 3650 -subj "/CN=RAUC Test Key"

Step 4: Add RAUC Configuration to the Image

Create the RAUC system configuration file (system.conf) in recipes-core/rauc/files/:

[system]
compatible=your-board
bootloader=uboot

[keyring]
path=/etc/rauc/keyring.pem

[slot.rootfs.0]
device=/dev/mmcblk0p2
type=ext4
bootname=A

[slot.rootfs.1]
device=/dev/mmcblk0p3
type=ext4
bootname=B

Now, install the keyring:

mkdir -p recipes-core/rauc/files/
cp ~/yocto/keys/development-1.crt recipes-core/rauc/files/keyring.pem

Then, update your RAUC recipe (recipes-core/rauc/rauc.bbappend):

SRC_URI:append = " file://system.conf file://keyring.pem"

3. Adding New Binaries to the RootFS

To include new binaries or update existing ones, modify your Yocto image recipe:
Step 1: Add New Binaries in Yocto

Modify your image recipe (core-image.bb or custom-image.bb):

IMAGE_INSTALL:append = " my-new-binary"

If the binary is custom-built, create a recipe in meta-my-layer/recipes-core/my-new-binary/my-new-binary.bb:

SUMMARY = "My new binary"
LICENSE = "MIT"
SRC_URI = "file://my-new-binary"

S = "${WORKDIR}"

do_install() {
    install -m 0755 ${S}/my-new-binary ${D}/usr/bin/my-new-binary
}

FILES:${PN} += "/usr/bin/my-new-binary"

Step 2: Rebuild the Image

Compile the updated rootfs with:

bitbake core-image-minimal

4. Creating and Deploying an Update Bundle
Step 1: Create the RAUC Update Bundle

Once the rootfs image is built, package it into a RAUC bundle.

Create a update-bundle.rauc recipe (recipes-core/rauc/update-bundle.bb):

SUMMARY = "RAUC update bundle"
LICENSE = "MIT"

inherit rauc-bundle

RAUC_BUNDLE_COMPATIBLE = "your-board"

RAUC_KEY_FILE = "${TOPDIR}/keys/development-1.pem"
RAUC_CERT_FILE = "${TOPDIR}/keys/development-1.crt"

SRC_URI = " \
    file://${DEPLOY_DIR_IMAGE}/core-image-minimal-yourmachine.ext4;subdir=files \
"

RAUC_SLOT_rootfs = "core-image-minimal-yourmachine.ext4"

Now, build the update bundle:

bitbake update-bundle

This will generate an update.raucb file.
5. Deploy and Apply the RAUC Update
Step 1: Transfer the Update Bundle

Copy the update bundle to the target device:

scp tmp/deploy/images/yourmachine/update-bundle.raucb root@<target-ip>:/tmp/

Step 2: Verify the Bundle

On the target device, check if the bundle is valid:

rauc info /tmp/update-bundle.raucb

Step 3: Install the Update

Apply the update:

rauc install /tmp/update-bundle.raucb

Once completed, reboot the device:

reboot

6. Verifying the Update

After reboot, check the RAUC status:

rauc status

Ensure the new rootfs slot is active.
7. Troubleshooting

    RAUC fails to install the update?
        Check the logs: journalctl -u rauc
        Ensure the partition structure in system.conf matches your system.
        Verify the signature: rauc info update-bundle.raucb

    New binaries do not appear in rootfs?
        Ensure IMAGE_INSTALL:append includes the correct binary.
        Verify the do_install() step in the recipe.

    RAUC reports a signature mismatch?
        Ensure you used the correct private key and certificate.
        Re-sign the update bundle and retry.

8. Conclusion

By following these steps, you can update the rootfs with new binaries or upgrade existing ones using RAUC in Yocto. This method provides a secure, atomic, and reliable way to update embedded Linux devices.

Would you like additional details on RAUC rollback mechanisms or A/B partition updates? 🚀
You said:
yes, give me  all i  need to know about RAUC with examples
ChatGPT said:
Complete Guide to RAUC: A/B System Updates and Rollback in Yocto

RAUC (Robust Auto-Update Controller) is an open-source and secure solution for A/B partition-based software updates in embedded Linux systems. It ensures atomic updates (either the update is applied successfully or not at all) and includes rollback mechanisms in case of failure.

This guide covers:

    RAUC Basics: How RAUC works and key concepts.
    RAUC Installation and Configuration in Yocto.
    Creating Update Bundles and signing them.
    Applying Updates and Rollback Mechanisms.
    A/B System Updates with partition switching.
    Error Handling and Troubleshooting.
    Practical Examples.

1. RAUC Basics
Key Features

✅ Atomic and Secure Updates: Ensures a fully functional system even if an update fails.
✅ A/B Partitioning: Allows the system to switch between two root filesystems.
✅ Cryptographic Signature Verification: Prevents unauthorized updates.
✅ Fail-Safe Rollback: If an update fails, RAUC reverts to the last working version.
✅ Flexible Storage Support: Supports mmcblk, ubi, raw NAND, UBIFS, ext4, SquashFS, EFI.
How RAUC Works

    Boot from rootfs A (Slot A).
    Download the update bundle.
    Install the new image to rootfs B (Slot B).
    Set Slot B as the active rootfs.
    Reboot into the new system.
    If Slot B fails, roll back to Slot A.

2. Setting Up RAUC in Yocto
Step 1: Add the RAUC Layer

If you haven’t already, clone the meta-rauc layer into your Yocto build:

cd ~/yocto
git clone https://github.com/rauc/meta-rauc.git
bitbake-layers add-layer meta-rauc

Step 2: Enable RAUC in Local Configuration

Edit conf/local.conf:

IMAGE_INSTALL:append = " rauc"
DISTRO_FEATURES:append = " systemd"
VIRTUAL-RUNTIME_init_manager = "systemd"
RAUC_KEY_FILE = "${TOPDIR}/keys/development-1.pem"

Step 3: Create Signing Keys

RAUC requires updates to be signed for security. Generate a private key and certificate:

mkdir -p ~/yocto/keys
openssl genpkey -algorithm RSA -out ~/yocto/keys/development-1.pem -pkeyopt rsa_keygen_bits:2048
openssl req -new -x509 -key ~/yocto/keys/development-1.pem -out ~/yocto/keys/development-1.crt -days 3650 -subj "/CN=RAUC Test Key"

3. Configuring RAUC Slots (A/B Partitioning)

RAUC requires a system.conf file to define partitions.

Create recipes-core/rauc/files/system.conf:

[system]
compatible=your-board
bootloader=uboot

[keyring]
path=/etc/rauc/keyring.pem

[slot.rootfs.0]
device=/dev/mmcblk0p2
type=ext4
bootname=A

[slot.rootfs.1]
device=/dev/mmcblk0p3
type=ext4
bootname=B

    Explanation:

        The system boots from rootfs A (p2) initially.
        Updates are installed on rootfs B (p3).
        The bootloader switches between A and B.

Now, install the keyring:

mkdir -p recipes-core/rauc/files/
cp ~/yocto/keys/development-1.crt recipes-core/rauc/files/keyring.pem

Update the RAUC recipe (recipes-core/rauc/rauc.bbappend):

SRC_URI:append = " file://system.conf file://keyring.pem"

4. Creating an Update Bundle

Once your root filesystem (rootfs) is built, package it as a RAUC bundle.
Step 1: Create a Recipe for the Update

Create recipes-core/rauc/update-bundle.bb:

SUMMARY = "RAUC update bundle"
LICENSE = "MIT"

inherit rauc-bundle

RAUC_BUNDLE_COMPATIBLE = "your-board"

RAUC_KEY_FILE = "${TOPDIR}/keys/development-1.pem"
RAUC_CERT_FILE = "${TOPDIR}/keys/development-1.crt"

SRC_URI = " \
    file://${DEPLOY_DIR_IMAGE}/core-image-minimal-yourmachine.ext4;subdir=files \
"

RAUC_SLOT_rootfs = "core-image-minimal-yourmachine.ext4"

Step 2: Build the RAUC Update

bitbake update-bundle

This will generate an update.raucb file in tmp/deploy/images/yourmachine/.
5. Deploying and Installing the Update
Step 1: Transfer the Update Bundle

Copy the bundle to the target device:

scp tmp/deploy/images/yourmachine/update-bundle.raucb root@<target-ip>:/tmp/

Step 2: Verify the Update Bundle

rauc info /tmp/update-bundle.raucb

Step 3: Install the Update

rauc install /tmp/update-bundle.raucb

If successful, reboot the system:

reboot

6. Rollback Mechanism
Automatic Rollback on Boot Failure

If the system fails to boot after an update, the bootloader detects the failure and switches back to the previous working partition.
Manual Rollback

If an issue is detected after booting into the new system:

rauc status
rauc mark-inactive
reboot

This forces the system to boot from the previous partition.
7. A/B System Updates with Bootloader Integration

For automatic A/B switching, the bootloader (U-Boot or GRUB) must support boot count checks.
Example: U-Boot Configuration

Edit uEnv.txt:

bootcmd=run bootcmd_rauc; run bootcmd_mmc
bootcmd_rauc=if test "${upgrade_available}" = "1"; then run bootcmd_mmc; else run bootcmd_old; fi
bootcmd_mmc=mmc dev 0; ext4load mmc 0:1 0x82000000 /boot/Image; booti 0x82000000
bootcmd_old=mmc dev 0; ext4load mmc 0:2 0x82000000 /boot/Image; booti 0x82000000

        If upgrade_available=1, the bootloader switches to the new slot.
        If boot fails, it automatically reverts.

Enable Boot Count Reset

Modify boot.scr:

setenv upgrade_available 0
saveenv

8. Troubleshooting

    RAUC reports invalid signature?
        Verify the key: openssl x509 -in development-1.crt -text
        Check the keyring on the device: cat /etc/rauc/keyring.pem

    Update fails to install?
        Run: rauc install --debug /tmp/update-bundle.raucb
        Check logs: journalctl -u rauc

    Rollback not working?
        Ensure bootloader supports rollback detection (U-Boot, GRUB, Barebox).
        Check if bootcount reset is applied after a successful boot.

Final Thoughts

With RAUC, you can implement secure, atomic, and fail-safe system updates. Using A/B partitioning, you ensure that devices remain bootable even if an update fails. 🚀

Would you like a practical example with a real-world use case? Let me know! 😊
You said:
yes
ChatGPT said:
Practical Example: A Real-World Use Case for RAUC

This example walks through implementing RAUC-based A/B updates on an ARM-based embedded system running Yocto, with a secure and rollback-capable update mechanism.
Scenario: Updating an IoT Gateway with RAUC

You're deploying an IoT gateway that collects sensor data and transmits it over MQTT to a cloud server. The device uses Yocto and boots from an eMMC storage with two root partitions (rootfs A and rootfs B).

You need a safe and secure OTA (Over-The-Air) update system that ensures: ✅ Updates don’t brick the device (A/B partitioning).
✅ Rollback happens automatically if an update fails.
✅ Firmware is cryptographically signed for security.
✅ Updates can be delivered over SSH or HTTP.
1. System Partition Layout

We'll configure A/B partitions to enable atomic updates:
Partition	Usage	Filesystem	Description
/dev/mmcblk0p1	Bootloader	FAT32	Stores bootloader files (u-boot, kernel)
/dev/mmcblk0p2	rootfs A	ext4	The primary root filesystem
/dev/mmcblk0p3	rootfs B	ext4	The alternate root filesystem
/dev/mmcblk0p4	Data Partition	ext4	Stores persistent application data
2. Yocto Configuration for RAUC
Step 1: Add RAUC Support

Ensure RAUC is included in the build:

Edit conf/local.conf:

IMAGE_INSTALL:append = " rauc"
DISTRO_FEATURES:append = " systemd"
VIRTUAL-RUNTIME_init_manager = "systemd"
RAUC_KEY_FILE = "${TOPDIR}/keys/development-1.pem"

Step 2: Generate RAUC Keys

We need a private key to sign updates:

mkdir -p ~/yocto/keys
openssl genpkey -algorithm RSA -out ~/yocto/keys/development-1.pem -pkeyopt rsa_keygen_bits:2048
openssl req -new -x509 -key ~/yocto/keys/development-1.pem -out ~/yocto/keys/development-1.crt -days 3650 -subj "/CN=RAUC Test Key"

3. Configuring RAUC for A/B Partitioning

Create a system.conf file for RAUC in recipes-core/rauc/files/system.conf:

[system]
compatible=iot-gateway
bootloader=uboot

[keyring]
path=/etc/rauc/keyring.pem

[slot.rootfs.0]
device=/dev/mmcblk0p2
type=ext4
bootname=A

[slot.rootfs.1]
device=/dev/mmcblk0p3
type=ext4
bootname=B

    This tells RAUC that our system has two rootfs slots (A and B).

Now, install the keyring:

mkdir -p recipes-core/rauc/files/
cp ~/yocto/keys/development-1.crt recipes-core/rauc/files/keyring.pem

Modify recipes-core/rauc/rauc.bbappend:

SRC_URI:append = " file://system.conf file://keyring.pem"

4. Creating and Building an Update Bundle

We’ll add a new MQTT feature and deploy an update.
Step 1: Modify the Root Filesystem

Edit your Yocto image recipe (core-image.bb):

IMAGE_INSTALL:append = " mosquitto"

(Mosquitto is an MQTT broker)
Step 2: Build the Root Filesystem

bitbake core-image-minimal

Step 3: Package the Update as a RAUC Bundle

Create a RAUC update recipe (recipes-core/rauc/update-bundle.bb):

SUMMARY = "RAUC update bundle"
LICENSE = "MIT"

inherit rauc-bundle

RAUC_BUNDLE_COMPATIBLE = "iot-gateway"

RAUC_KEY_FILE = "${TOPDIR}/keys/development-1.pem"
RAUC_CERT_FILE = "${TOPDIR}/keys/development-1.crt"

SRC_URI = " \
    file://${DEPLOY_DIR_IMAGE}/core-image-minimal-iot-gateway.ext4;subdir=files \
"

RAUC_SLOT_rootfs = "core-image-minimal-iot-gateway.ext4"

Step 4: Build the Update

bitbake update-bundle

This generates an update.raucb file in tmp/deploy/images/iot-gateway/.
5. Deploying and Installing the Update
Step 1: Transfer the Update Bundle

Copy the update bundle to the device:

scp tmp/deploy/images/iot-gateway/update-bundle.raucb root@<target-ip>:/tmp/

Step 2: Verify the Bundle

rauc info /tmp/update-bundle.raucb

Step 3: Install the Update

rauc install /tmp/update-bundle.raucb

Step 4: Reboot

If the update installs successfully:

reboot

6. Rollback Mechanism
Automatic Rollback

If the new update fails to boot, U-Boot detects it and reverts to the previous working partition.
Manual Rollback

If something goes wrong, manually switch back to the previous partition:

rauc status
rauc mark-inactive
reboot

7. Bootloader Integration for A/B Switching

Modify U-Boot environment (uEnv.txt):

bootcmd=run bootcmd_rauc; run bootcmd_mmc
bootcmd_rauc=if test "${upgrade_available}" = "1"; then run bootcmd_mmc; else run bootcmd_old; fi
bootcmd_mmc=mmc dev 0; ext4load mmc 0:1 0x82000000 /boot/Image; booti 0x82000000
bootcmd_old=mmc dev 0; ext4load mmc 0:2 0x82000000 /boot/Image; booti 0x82000000

Enable Boot Count Reset

Modify boot.scr:

setenv upgrade_available 0
saveenv

8. Troubleshooting

    RAUC reports invalid signature?

rauc info update-bundle.raucb

Verify keys are correctly installed in /etc/rauc/keyring.pem.

Update fails to install?

    journalctl -u rauc

    Rollback not happening?
        Ensure bootloader supports rollback detection.
        Check if boot count is reset after a successful boot.

Final Thoughts

By using RAUC with A/B partitions, we ensure: ✅ Atomic and secure updates.
✅ Rollback protection.
✅ Cryptographic verification.
✅ Seamless OTA firmware upgrades.

This method is widely used in IoT gateways, automotive ECUs, and industrial systems.
Next Steps

Would you like to integrate remote OTA updates (HTTP/HTTPS) or add delta updates to reduce bandwidth usage? 🚀
You said:
explain to me why keys and certificate, what is system.conf and how to create it why tbe bootloader is important and give me the example of barebox, and the explain the recipe bundle, and i want to reboot immedialtly and automic when the update finish to the new one
ChatGPT said:
Deep Dive into RAUC and Secure A/B Updates

To fully understand RAUC updates, let's break it down into key components:

    Why use keys and certificates in RAUC?
    What is system.conf and how to create it?
    Why is the bootloader important in an A/B update system?
    Example configuration for Barebox (alternative to U-Boot).
    Explanation of the RAUC bundle recipe.
    How to automatically reboot immediately after the update.

1. Why Use Keys and Certificates in RAUC?

RAUC ensures secure updates by using cryptographic signing. The update bundle (.raucb) must be signed with a private key and verified using a certificate before installation.
How It Works

    Private Key (.pem) → Used to sign the update bundle.
    Certificate (.crt) → Installed on the device to verify that updates are authentic.

Without this mechanism, anyone could create a malicious update, compromising the device.
Generating Keys & Certificates

We create a self-signed certificate for testing:

mkdir -p ~/yocto/keys
openssl genpkey -algorithm RSA -out ~/yocto/keys/development-1.pem -pkeyopt rsa_keygen_bits:2048
openssl req -new -x509 -key ~/yocto/keys/development-1.pem -out ~/yocto/keys/development-1.crt -days 3650 -subj "/CN=RAUC Test Key"

    The private key (development-1.pem) must be kept secret.
    The certificate (development-1.crt) is installed on the device at /etc/rauc/keyring.pem.

2. What is system.conf and How to Create It?

system.conf defines how RAUC interacts with the partitions.
Example system.conf for A/B Partitioning

Create recipes-core/rauc/files/system.conf:

[system]
compatible=my-device
bootloader=barebox

[keyring]
path=/etc/rauc/keyring.pem

[slot.rootfs.0]
device=/dev/mmcblk0p2
type=ext4
bootname=A

[slot.rootfs.1]
device=/dev/mmcblk0p3
type=ext4
bootname=B

Breakdown

    compatible=my-device: Ensures the update is applied only to the correct device.
    bootloader=barebox: Tells RAUC that we are using Barebox.
    [slot.rootfs.0] and [slot.rootfs.1]: Define two rootfs partitions (A and B).
    bootname=A/B: Helps the bootloader identify the active partition.

This allows RAUC to install the update on the inactive partition, switch to it, and boot from there.
3. Why Is the Bootloader Important?

The bootloader is crucial because it: ✅ Determines which partition to boot from.
✅ Handles rollback if a boot fails.
✅ Supports boot count tracking for automatic fallback.

Without a bootloader managing A/B switching, the system wouldn’t know which rootfs is active or how to revert after failure.
4. Example of Barebox Configuration for RAUC
Step 1: Modify Barebox Environment

Edit env/init in Barebox bootloader:

global.bootargs.base="rootwait console=ttyS0,115200"

if [ "$upgrade_available" = "1" ]; then
    echo "Booting new rootfs..."
    global.linux.bootargs="$bootargs.base root=/dev/mmcblk0p3"
    boot mmc0.3
else
    echo "Booting old rootfs..."
    global.linux.bootargs="$bootargs.base root=/dev/mmcblk0p2"
    boot mmc0.2
fi

Step 2: Ensure Boot Count Reset After a Successful Boot

Add this in the startup script:

if [ "$upgrade_available" = "1" ]; then
    global.upgrade_available=0
    saveenv
fi

    Why?

        If an update is installed, it sets upgrade_available=1.
        Barebox boots the new partition.
        If the system crashes, it reboots back to the old partition.
        If the system works, it sets upgrade_available=0.

5. Explanation of the RAUC Bundle Recipe

To update the system, we create a RAUC bundle recipe.
Example update-bundle.bb

Create recipes-core/rauc/update-bundle.bb:

SUMMARY = "RAUC update bundle"
LICENSE = "MIT"

inherit rauc-bundle

RAUC_BUNDLE_COMPATIBLE = "my-device"

RAUC_KEY_FILE = "${TOPDIR}/keys/development-1.pem"
RAUC_CERT_FILE = "${TOPDIR}/keys/development-1.crt"

SRC_URI = " \
    file://${DEPLOY_DIR_IMAGE}/core-image-minimal-mydevice.ext4;subdir=files \
"

RAUC_SLOT_rootfs = "core-image-minimal-mydevice.ext4"

Explanation

    inherit rauc-bundle → Tells Yocto this is a RAUC update.
    RAUC_BUNDLE_COMPATIBLE = "my-device" → Ensures updates match the correct hardware.
    RAUC_KEY_FILE/RAUC_CERT_FILE → Specifies signing keys.
    SRC_URI → Points to the root filesystem update.
    RAUC_SLOT_rootfs → Specifies the partition to update.

Build the RAUC Bundle

bitbake update-bundle

This generates update-bundle.raucb.
6. Immediate and Automatic Reboot After Update

To reboot automatically after an update, modify RAUC service behavior.
Step 1: Modify rauc.service

On the target device, edit:

sudo nano /etc/systemd/system/rauc.service

Add:

[Service]
ExecStartPost=/bin/sh -c 'sleep 2 && reboot'

Step 2: Install and Reboot

rauc install /tmp/update-bundle.raucb && reboot

    Why?

        The update installs.
        The system reboots immediately to the new partition.
        No user intervention needed.

7. Full Update Process (End-to-End)
Step 1: Build the Update Bundle

bitbake update-bundle

Step 2: Transfer the Update to the Device

scp tmp/deploy/images/mydevice/update-bundle.raucb root@<target-ip>:/tmp/

Step 3: Install and Reboot Automatically

rauc install /tmp/update-bundle.raucb && reboot

Step 4: Verify the New System

After reboot, check:

rauc status

It should show:

Slot rootfs.1 is booted and marked as active.

Final Thoughts

✅ RAUC ensures secure, atomic, and rollback-safe updates.
✅ Keys & certificates prevent unauthorized updates.
✅ The bootloader (Barebox or U-Boot) is critical for A/B switching.
✅ Automatic reboot ensures updates are applied seamlessly.

Would you like an example of remote OTA updates over HTTP/HTTPS? 🚀
You said:
yes, and i'm using qemu to emulate yocto x86 image
ChatGPT said:
Remote OTA Updates Over HTTP/HTTPS with RAUC on QEMU (Yocto x86 Emulation)

Since you're using QEMU to emulate a Yocto x86 image, we will implement remote OTA (Over-The-Air) updates with RAUC over HTTP/HTTPS. This setup allows you to download and apply updates remotely without manually transferring files.
Overview

We will:

    Set up an HTTP/HTTPS server to host the update bundles.
    Configure the QEMU target to fetch updates from the server.
    Automate the update and reboot process.
    Ensure rollback in case of failure.

1. Setting Up an HTTP/HTTPS Server
Option 1: Simple HTTP Server

To serve update bundles over HTTP, use Python:

cd ~/yocto/tmp/deploy/images/qemu-x86-64
python3 -m http.server 8080

    This will start an HTTP server at http://<host-ip>:8080/.

Option 2: Secure HTTPS Server

To enable HTTPS, generate a self-signed certificate:

openssl req -x509 -newkey rsa:2048 -keyout server.key -out server.crt -days 365 -nodes

Then, run a secure HTTPS server:

python3 -m http.server --bind 0.0.0.0 --certfile server.crt --keyfile server.key 8443

Now, the update is available at:

    HTTP: http://<host-ip>:8080/update-bundle.raucb
    HTTPS: https://<host-ip>:8443/update-bundle.raucb

2. Configuring QEMU to Fetch Updates
Step 1: Start QEMU with Network Access

Ensure that QEMU has network access:

qemu-system-x86_64 -m 1024M -nographic -net nic -net user,hostfwd=tcp::2222-:22 -drive file=core-image-minimal-qemu-x86-64.ext4,format=raw

Now, SSH into QEMU:

ssh root@localhost -p 2222

Step 2: Install RAUC on the QEMU Image

Inside QEMU:

opkg update
opkg install rauc curl

Step 3: Verify RAUC is Installed

rauc --version

3. Automating the Update Process

To automate the update:

    Download the latest update from the server.
    Verify the signature.
    Install the update.
    Reboot automatically.

Step 1: Create an Update Script

On QEMU, create /usr/bin/update.sh:

#!/bin/sh

# Define update URL
UPDATE_URL="http://<host-ip>:8080/update-bundle.raucb"

# Download the update
curl -o /tmp/update-bundle.raucb "$UPDATE_URL"

# Verify the bundle
rauc info /tmp/update-bundle.raucb

# Install the update
if rauc install /tmp/update-bundle.raucb; then
    echo "Update successful. Rebooting..."
    reboot
else
    echo "Update failed. Keeping current version."
fi

Make it executable:

chmod +x /usr/bin/update.sh

4. Scheduling Automatic Updates

To check for updates periodically, use cron.
Step 1: Install cronie

opkg install cronie

Step 2: Add a Cron Job

Edit crontab:

crontab -e

Add:

0 * * * * /usr/bin/update.sh

    This runs update.sh every hour.

5. Testing the OTA Update
Step 1: Build a New Update

Modify your Yocto image (e.g., add a new package):

IMAGE_INSTALL:append = " nano"

Then, rebuild:

bitbake update-bundle

Copy update-bundle.raucb to ~/yocto/tmp/deploy/images/qemu-x86-64/.
Step 2: Start the HTTP Server

cd ~/yocto/tmp/deploy/images/qemu-x86-64
python3 -m http.server 8080

Step 3: Run the Update on QEMU

Inside QEMU:

/usr/bin/update.sh

If successful, QEMU reboots into the updated rootfs.
Step 4: Verify the Update

After reboot:

rauc status
nano --version

If nano is installed, the update succeeded!
6. Ensuring Rollback on Failure
Simulate a Bad Update

Modify update-bundle.bb to break the system:

IMAGE_INSTALL:append = " broken-package"

Rebuild and deploy the update.
Boot Fails? RAUC Rolls Back!

If the update causes boot failure, RAUC and the bootloader will revert to the last working partition.

To check:

rauc status

It should indicate that it rolled back.
7. Summary

✅ Served updates over HTTP/HTTPS.
✅ Automated downloads and installations.
✅ Ensured rollback if the update failed.
Next Steps

    Secure updates with HTTPS & authentication.
    Implement delta updates to minimize bandwidth usage.

Would you like help with delta updates? 🚀
You said:
ssh wont work for me copy .raucb to qemu give me ohter solution and i'm uqing qemu through yocto the is runqemu
ChatGPT said:
Alternative Methods to Transfer .raucb to QEMU with runqemu in Yocto

Since SSH isn't working for transferring the RAUC update bundle (.raucb) to your QEMU instance using runqemu, here are alternative solutions:
1. Using a Shared Network Directory (NFS or 9p Filesystem)

The best way to transfer files between the host system and QEMU Yocto instance is to use a shared directory. You can achieve this using 9p Filesystem (recommended for QEMU) or NFS.
Solution 1: 9p Filesystem (Easiest)

Step 1: Create a Shared Directory on the Host On your Yocto build host:

mkdir -p ~/qemu-share
cp ~/yocto/tmp/deploy/images/qemu-x86-64/update-bundle.raucb ~/qemu-share/

Step 2: Start QEMU with a Shared Folder Run QEMU with runqemu and enable 9p file sharing:

runqemu qemu-x86-64 nographic slirp qemuparams="-virtfs local,path=$HOME/qemu-share,mount_tag=host0,security_model=mapped"

Step 3: Mount the Shared Directory in QEMU Inside QEMU (Yocto target):

mkdir -p /mnt/host
mount -t 9p -o trans=virtio host0 /mnt/host
ls /mnt/host

You should see update-bundle.raucb in /mnt/host.

Step 4: Copy the File to a Local Directory

cp /mnt/host/update-bundle.raucb /tmp/

Now, you can proceed with:

rauc install /tmp/update-bundle.raucb
reboot

Solution 2: Using an NFS Share

If you prefer NFS, set up an NFS server on the host and mount it inside QEMU.

Step 1: Install and Configure NFS on Host On your host machine:

sudo apt install nfs-kernel-server
sudo mkdir -p /srv/nfs/qemu-share
sudo chmod 777 /srv/nfs/qemu-share
echo "/srv/nfs/qemu-share *(rw,sync,no_root_squash,no_subtree_check)" | sudo tee -a /etc/exports
sudo exportfs -ra
sudo systemctl restart nfs-kernel-server

Copy your update bundle:

cp ~/yocto/tmp/deploy/images/qemu-x86-64/update-bundle.raucb /srv/nfs/qemu-share/

Step 2: Start QEMU with NFS Support Run runqemu with NFS enabled:

runqemu qemu-x86-64 nographic slirp

Step 3: Mount the NFS Share in QEMU Inside the QEMU terminal:

mkdir -p /mnt/nfs
mount -o nolock -t nfs <host-ip>:/srv/nfs/qemu-share /mnt/nfs
ls /mnt/nfs

(Replace <host-ip> with the actual host machine’s IP.)

Now, copy the update bundle:

cp /mnt/nfs/update-bundle.raucb /tmp/

Proceed with:

rauc install /tmp/update-bundle.raucb
reboot

2. Using a Virtual Disk (Second Drive)

If you cannot use a network-based method, you can attach a virtual disk to QEMU, copy the update bundle to it, and mount it inside QEMU.
Step 1: Create a Virtual Disk

On the host:

qemu-img create -f raw update-disk.img 100M
mkfs.ext4 update-disk.img
mkdir -p /mnt/update-disk
sudo mount update-disk.img /mnt/update-disk
cp ~/yocto/tmp/deploy/images/qemu-x86-64/update-bundle.raucb /mnt/update-disk/
sudo umount /mnt/update-disk

Step 2: Attach the Disk to QEMU

Run runqemu and attach update-disk.img:

runqemu qemu-x86-64 nographic slirp qemuparams="-drive file=update-disk.img,format=raw"

Step 3: Mount the Disk Inside QEMU

Inside QEMU:

mkdir -p /mnt/update
mount /dev/vdb /mnt/update
ls /mnt/update

Now, copy the update bundle:

cp /mnt/update/update-bundle.raucb /tmp/

Install the update:

rauc install /tmp/update-bundle.raucb
reboot

3. Using a Local Web Server (HTTP Download)

If network access is available, use an HTTP server.
Step 1: Start an HTTP Server on the Host

cd ~/yocto/tmp/deploy/images/qemu-x86-64
python3 -m http.server 8080

Step 2: Download the Update in QEMU

Inside QEMU:

wget -O /tmp/update-bundle.raucb http://<host-ip>:8080/update-bundle.raucb

(Replace <host-ip> with your host’s IP address.)
Step 3: Install the Update

rauc install /tmp/update-bundle.raucb
reboot

Best Method to Use?
Method	Pros	Cons
9p Filesystem	✅ Fast and easy, no extra setup	❌ Requires qemuparams
NFS Share	✅ Works on any networked setup	❌ Requires setting up NFS server
Virtual Disk	✅ Works offline	❌ Requires extra disk setup
HTTP Download	✅ Works with any networked QEMU	❌ Requires network access

🔹 Recommended: Use 9p Filesystem if possible for the fastest and easiest file transfer.
🔹 If network access is available, HTTP download is the simplest method.
Final Steps: Automate the Update & Reboot

If you want the update to install and reboot automatically, create this script on QEMU (/usr/bin/auto-update.sh):

#!/bin/sh

# Fetch the update from the shared folder
cp /mnt/host/update-bundle.raucb /tmp/ || wget -O /tmp/update-bundle.raucb http://<host-ip>:8080/update-bundle.raucb

# Verify and install the update
if rauc install /tmp/update-bundle.raucb; then
    echo "Update successful. Rebooting..."
    reboot
else
    echo "Update failed. Keeping current version."
fi

Make it executable:

chmod +x /usr/bin/auto-update.sh

Run:

/usr/bin/auto-update.sh

Final Summary

✅ Used 9p, NFS, Virtual Disk, or HTTP to transfer .raucb to QEMU.
✅ Automated the update and reboot process.
✅ Ensured rollback in case of failure.

Would you like a method to schedule automatic OTA updates at boot? 🚀
